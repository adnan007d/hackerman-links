import Head from "next/head";
import { useContext, useEffect, useState } from "react";
import Header from "../components/Header";
import LinkCard from "../components/LinkCard";
import db, { auth } from "../utils/firebase";
import LinksContext from "../context/LinksContext";
import nookies, { parseCookies } from "nookies";

export default function Home({ data, user }) {
  const [filteredSearch, setFilteredSearch] = useState(null);
  const { setUser } = useContext(LinksContext);
  const cookies = parseCookies();
  if (user) setUser(user);

  useEffect(() => {
    const cookies = parseCookies();
    setUser(cookies?.user);
    return () => {};
  }, [cookies]);

  const handleChange = (e) => {
    const search = e.target.value;
    if (!search) {
      setFilteredSearch(null);
      return;
    }
    setFilteredSearch(
      data.filter((doc) =>
        doc.keywords.toLowerCase().includes(search.toLowerCase())
      )
    );
  };

  return (
    <div className="">
      <Head>
        <title>Hackerman Links</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header handleChange={handleChange} />

      <div className="flex w-screen flex-wrap justify-center">
        {filteredSearch
          ? filteredSearch?.map((doc) => (
              <LinkCard
                key={doc.id}
                name={doc.name}
                path={doc.path}
                to={doc.to}
              />
            ))
          : data?.map((doc) => (
              <LinkCard
                key={doc.id}
                name={doc.name}
                path={doc.path}
                to={doc.to}
              />
            ))}
      </div>
    </div>
  );
}

export async function getServerSideProps(context) {
  const linksData = await db.collection("links").get();
  await auth.signInWithEmailAndPassword(
    process.env.EMAIL,
    process.env.PASSWORD
  );

  const cookies = nookies.get(context);

  const username = cookies.user || "dummy";

  const docs = (
    await db.collection("admins").where("username", "==", username).get()
  ).docs;

  const user = docs.length === 1 ? username : null;
  const data = linksData.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
  return {
    props: { data: data, user: user },
  };
}
